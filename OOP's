Object Oriented Programming - Aim is to bind together the data and the functions that operate on them 
                              so that no other part of the code can access this data except that function.
			 
Access Modifiers:
1. Public -> Accessible in all classes in your application.
2. Protected -> Accessible within the package in which it is defined and its sub classes.
3. Private -> Accessible only within the class in which it is defined.
4. Default(Without using any modifier) -> Accessible within the same class and package within which its class is defined.

Class, Object, Method, Method Passing

Four Pillars of OOP's
1. Abstraction
2. Encapsulation
3. Inheritance
4. Polymorphism -> i Compile-time polymorphism  ii Runtime polymorphism



Class - Act as blueprints for everything we represent using code 
Ex: Music player, Restaurant bill 

It has Attributes/properties - Base, Height, side length
It has Behaviors/Methods - findArea() - A behavior is a function located inside a class that can perform a particular action.


Instances - It is a object created from class blueprint

Constructor - These instances are created using Constructor which is a special method inside class to create and intialize instances.

constructor name is same as class name. 
constructor always returns the instance of the class.

we can add parameters to give a dynamic value for each attribute. parameters name can be different than the attribute name.

This keyword and Dot operator are used to access the attributes of the Instance.

When would you use the this keyword?
when you need to make a distinction between an attribute variable and a parameter
The `this` keyword allows you to access the attributes inside the class.

public Triangle(double base, double height, double one, double two, double three){
  this.base = base;
  this.height = height;
  this.one = one;
  this.two = two;
  this.three = three;
}

Call the constructor with new keyword;

Triangle triangleA = new Triangle(15,8,15,8,17);
Triangle triangleB = new Triangle(3, 2.598,3,3,3);

Now this Triangle class is a datatype.
+
############################################################
Main.java

public class Main
{

	public static void main(String[] args) {
		Triangle triangleA = new Triangle(15, 8, 15, 8, 17);
		Triangle triangleB = new Triangle(3, 2.598,3, 3, 3);
		
		double areaA = triangleA.areaTriangle();
		System.out.println("Area of Trianggle A: "+ areaA);
		
		double areaB = triangleB.areaTriangle();
		System.out.println("Area of Trianggle B: "+ areaB);
		
	}
}


Triangle.java
public class Triangle{
    double base;     //Atrributes
    double height;
    double one;
    double two;
    double three;
    
    public Triangle(double base, double height, double one, double two, double three){  //Parameters -> inputs for attribute sof triangle class
        this.base = base;
        this.height = height;
        this.one = one;
        this.two = two;
        this.three = three;
    }
    
    public double areaTriangle(){
        
        return (this.base*this.height) / 2;
        
    }
}


#################################################

Instance Method vs Static Method.

Instance methods are reffered as non-static methods as you need an instance to use them.
Class methods are reffered as static methods as you do not need an instance to use them. 

##############################################################################################
Main.java

public class Main
{
	public static void main(String[] args) {
	    
		
		Students s1 = new Students("Madhu","Karumuru",2023,3.80,"Information Systems");
		
		System.out.println(s1.firstName +" "+ s1.lastName);
		s1.incrementYear();
		System.out.println(s1.gradYear);
	}
}

Students.java

public class Students{
    String firstName;
    String lastName;
    int gradYear;
    double gpa;
    String major;
    
    public Students(String firstName, String lastName, int gradYear, double gpa, String major){
        this.firstName = firstName;
        this.lastName = lastName;
        this.gradYear = gradYear;
        this.gpa = gpa;
        this.major = major;
    }
    
    public void incrementYear(){
        this.gradYear = this.gradYear + 1;
    }
    
}


#####################################################################################

Main.java


public class Main
{
	public static void main(String[] args) {
        	Tree t1 = new Tree(125,5,"Oak");
        	Tree t2 = new Tree(90,30,"Maple");
        	Tree t3 = new Tree(87,28,"Palm");
        	
        	System.out.println(t1.treeType);
        	
        	t1.announceTallTree();
        	t2.announceTallTree();
        	
        	System.out.println(Tree.trunkColor);
        	
        	t1.announceTree();
	}
}




Tree.java

public class Tree{
    double height;            //Non static attributes/members or Instance attributes
    double trunkDiameter;
    String treeType;
    static String trunkColor = "Brown"; //static member as truck is same for all trees
    
    Tree(double height, double trunkDiameter, String treeType){       //Contructor to create instances
        this.height = height;
        this.trunkDiameter = trunkDiameter;
        this.treeType = treeType;
    }
    
    void grow(){                                      // Method
        this.height = this.height + 10;
        this.trunkDiameter = this.trunkDiameter + 1;
    }
    
    void announceTallTree(){
        if(this.height > 100){
        	    System.out.println("Thats a Tall "+this.treeType+ " Tree");
        }else{
            System.out.println("Thats a Small "+this.treeType+ " Tree");
        }
    }
    
    static void announceTree(){                    //Static Method
        System.out.println("Look out for that "+trunkColor+" tree!");
    }
}

#############################################################################################

Encapulation -> We want data hidden from other claases so that they cannot use it directly.


-> Use Access modifiers to achieve Encapsulation
-> Declare all attributes to private 
-> Write public methods to get and set all the values of each attribute with the public access modifier.

Main.java

public class Main
{
	public static void main(String[] args) {
        	Tree t1 = new Tree(125,5,"Oak");
        	Tree t2 = new Tree(90,30,"Maple");
        	Tree t3 = new Tree(87,28,"Palm");
        	
        //	System.out.println(t1.treeType);  cannot access as treetype is private
        	
        //	System.out.println(Tree.trunkColor); cannot accessas truckcolor is private
        	
        	System.out.println(t1.getHeight());  //access private attributes usign public methods
        	System.out.println(t2.getTrunkDiameter());
        	
        	t1.setTrunkDiameter(35);      //passing value to seter methods
        	
        	System.out.println(t1.getTrunkDiameter());
	}
}




Tree.java

public class Tree{
    private double height;            //Non static attributes/members or Instance attributes
    private double trunkDiameter;
    private String treeType;
    private static String trunkColor = "Brown"; //static member as truck is same for all trees
    
    public Tree(double height, double trunkDiameter, String treeType){       //Contructor to create instances
        this.height = height;
        this.trunkDiameter = trunkDiameter;
        this.treeType = treeType;
    }
    
    public double getHeight(){                  //getter methods to retieve attributes data
        return height;
    }
    
    public double getTrunkDiameter(){
        return trunkDiameter;
    }
    
    public String getTreeType(){
        return treeType;
    }
    
    public void setTrunkDiameter(double truckDiameter){
        this.trunkDiameter = truckDiameter;
    }
    
    public void grow(){                                      // Method
        this.height = this.height + 10;
        this.trunkDiameter = this.trunkDiameter + 1;
    }
    
    public void announceTallTree(){
        if(this.height > 100){
        	    System.out.println("Thats a Tall "+this.treeType+ " Tree");
        }else{
            System.out.println("Thats a Small "+this.treeType+ " Tree");
        }
    }
    
    static void announceTree(){                    //Static Method
        System.out.println("Look out for that "+trunkColor+" tree!");
    }
}

#########################################################################################
Main.java

public class Main
{
	public static void main(String[] args) {
	    BankAccount b1 = new BankAccount("Madhu",2980);
	    BankAccount b2 = new BankAccount("Bala",4567);
	    
	    b1.printInfo();
	    
	    b1.withDraw(500);
	    
	    b1.printInfo();
	    
	    b1.deposit(1000);
	    
	    b1.printInfo();
	    
	}
}

BankAccount.java

public class BankAccount{
    private String owner;
    private double balance;
    
    public BankAccount(String owner, double balance){
        this.owner = owner;
        this.balance = Math.max(balance, 0);
    }
    
    public void withDraw(double withDrawAmount){
        if(withDrawAmount <= this.balance){
            this.balance = this.balance - withDrawAmount;
        }
    }
    
    public void deposit(double depositAmount){
        if(depositAmount > 0){
            this.balance = this.balance + depositAmount;
        }
    }
    
    public void printInfo(){
        System.out.println("Account Name: "+this.owner+"\nBalance: "+this.balance);
    }
    
}

########################################################################################################

Inheritance - Child class inherits properties from parent class.

-> Avoids duplication of code
-> Additions and modifications to the superclass will automatically affect the subclass.
-> promotes code reusability and scalability

Single Level Inheritance -> One Superclass and one subclass.  Employee <- Salesperson
Hierarchical Inheritance -> One Superclass and many subclasses. Employee <- Analyst, Salesperson
Multi Level Inheritance - > Super class having another Super class along with subclass. Person <- Employee <- Analyst, Salesperson.

###########################

Main.java

public class Main
{
	public static void main(String[] args) {
		Salesperson s1 = new Salesperson("Madhu",97000,24,0.25);
		Analyst a1 = new Analyst("Bala",103000,23);
		
		System.out.println("SalesPerson Name: "+s1.getName());
		System.out.println("Analyst age: "+a1.getAge());
		
	}
}

Salesperson.java

public class Salesperson extends Employee{
   
    private double commissionPercentage;
    
    public Salesperson(String name, double salary, int age, double commissionPercentage){
        super(name, salary, age);
        this.commissionPercentage = commissionPercentage;
    }
    
    
    public double getCommissionPercentage(){
        return this.commissionPercentage;
    }
    
    
    public void raiseCommission(){
        if(this.commissionPercentage < .30){
            this.commissionPercentage = this.commissionPercentage * 1.2;
        }
    }
    
}


Analyst.java

public class Analyst extends Employee{
    
    public Analyst(String name, double salary, int age){
        super(name, salary, age);
    }
    
    public double getAnnualBonus(){
        return this.salary * 0.05;
        //return super.salary * 0.05;   anycde works
    }
}

Employee.java

public class Employee{
    private String name;
    protected double salary;    //Changed it to protected to use it in the subclass
    private int age;
    
    public Employee(String name, double salary, int age){
        this.name = name;
        this.salary = salary;
        this.age = age;
    }
    
    public String getName(){
        return this.name;
    }
    
    public double getSalary(){
        return this.salary;
    }
    
    public int getAge(){
        return this.age;
    }
    
    public void raiseSalary(){
        this.salary = this.salary * 1.2;
    }
    
}

##################################################################################################

Polymorphism: The ability for an object or function to take many forms(Behaviours).

Java supports 2 types of polymorphism
-> Run time polymorphism
-> Compile time polymorphism

Method Overloading: Same method name with different parameters. 
->Compile-time polymorphism is achieved through method overloading. At compile-time, java knows which method to call by checking the method signatures. 
  So this is called compile-time polymorphism or static or early binding.
  
##############################################
// compile-time polymorphism
public class GFG {
 
    // First addition function
    public static int add(int a, int b)
    {
        return a + b;
    }
 
    // Second addition function
    public static double add(
        double a, double b)
    {
        return a + b;
    }
 
    // Driver code
    public static void main(String args[])
    {
        // Here, the first addition
        // function is called
        System.out.println(add(2, 3));
 
        // Here, the second addition
        // function is called
        System.out.println(add(2.0, 3.0));
    }
}

Output:
5
5.0

###############################################


Method Overriding: Same Method name and same parameters in different classes. class A Extends class B{}
Method overriding says the child class has the same method as declared in the parent class.

The Runtime polymorphism can be achieved by method overriding. 
Java virtual machine determines the proper method to call at the runtime, not at the compile time. It is also called dynamic or late binding.

// Java program to demonstrate
// runtime polymorphism
 
// Implementing a class
class Test {
 
    // Implementing a method
    public void method()
    {
        System.out.println("Method 1");
    }
}
 
// Defining a child class
public class GFG extends Test {
 
    // Overriding the parent method
    public void method()
    {
        System.out.println("Method 2");
    }
 
    // Driver code
    public static void main(String args[])
    {
        Test test = new GFG();
 
        test.method();
    }
}

Output:

Method 2


########################################################################

Main.java
public class Main
{
	public static void main(String[] args) {
		Contacts one = new Contacts("Madhu", new PhoneNumber("9016783656"));
		Contacts two = new Contacts("Bala", new PhoneNumber(1,"9016783012"));
		Contacts three = new Contacts("Reddy", new PhoneNumber("9016789018"));
		Contacts four = new Contacts("Venkata","karumurimadhu2@gmail.com");
		Contacts five  = new Contacts("sudhana", new PhoneNumber("9016781908"),"karumuruvit@gmail.com");
	}
}


Contacts.java

public class Contacts{
    private String name;
    private String email;
    private PhoneNumber phoneNumber;
    
    public Contacts(String name, PhoneNumber phoneNumber, String email){
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }
    
    public Contacts(String name, PhoneNumber phoneNumber){
        this.name = name;
        this.phoneNumber = phoneNumber;
    }
    
    public Contacts(String name, String email){
        this.name = name;
        this.email = email;
    }
    
    //public String toString(){                     use tostring method to display contacts info
    //    return "Contact{"+"name="+
    //}
}


PhoneNumber.java

public class PhoneNumber{
    private int countryCode;
    private String phoneNumber;
    
    public PhoneNumber(String phoneNumber){
        if(phoneNumber.length()>10){
            this.countryCode = Integer.parseInt(phoneNumber.substring(0, phoneNumber.length()-10));
            this.phoneNumber = phoneNumber.substring(phoneNumber.length()-10);
        }else {
            this.countryCode = 1;
            this.phoneNumber = phoneNumber;
        } 
    }
    
    public PhoneNumber(int countryCode, String PhoneNumber){
        this.countryCode = countryCode;
        this.phoneNumber = phoneNumber;
    }
}

###########################################################################################################33

