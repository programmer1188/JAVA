Object Oriented Programming - Aim is to bind together the data and the functions that operate on them 
                              so that no other part of the code can access this data except that function.
			 
Access Modifiers:
1. Public -> Accessible in all classes in your application.
2. Protected -> Accessible within the package in which it is defined and its sub classes.
3. Private -> Accessible only within the class in which it is defined.
4. Default(Without using any modifier) -> Accessible within the same class and package within which its class is defined.

Class, Object, Method, Method Passing

Four Pillars of OOP's
1. Abstraction
2. Encapsulation
3. Inheritance
4. Polymorphism -> i Compile-time polymorphism  ii Runtime polymorphism



Class - Act as blueprints for everything we represent using code 
Ex: Music player, Restaurant bill 

It has Attributes/properties - Base, Height, side length
It has Behaviors/Methods - findArea() - A behavior is a function located inside a class that can perform a particular action.


Instances - It is a object created from class blueprint

Constructor - These instances are created using Constructor which is a special method inside class to create and intialize instances.

constructor name is same as class name. 
constructor always returns the instance of the class.

we can add parameters to give a dynamic value for each attribute. parameters name can be different than the attribute name.

This keyword and Dot operator are used to access the attributes of the Instance.

When would you use the this keyword?
when you need to make a distinction between an attribute variable and a parameter
The `this` keyword allows you to access the attributes inside the class.

public Triangle(double base, double height, double one, double two, double three){
  this.base = base;
  this.height = height;
  this.one = one;
  this.two = two;
  this.three = three;
}

Call the constructor with new keyword;

Triangle triangleA = new Triangle(15,8,15,8,17);
Triangle triangleB = new Triangle(3, 2.598,3,3,3);

Now this Triangle class is a datatype.
+
############################################################
Main.java

public class Main
{

	public static void main(String[] args) {
		Triangle triangleA = new Triangle(15, 8, 15, 8, 17);
		Triangle triangleB = new Triangle(3, 2.598,3, 3, 3);
		
		double areaA = triangleA.areaTriangle();
		System.out.println("Area of Trianggle A: "+ areaA);
		
		double areaB = triangleB.areaTriangle();
		System.out.println("Area of Trianggle B: "+ areaB);
		
	}
}


Triangle.java
public class Triangle{
    double base;     //Atrributes
    double height;
    double one;
    double two;
    double three;
    
    public Triangle(double base, double height, double one, double two, double three){  //Parameters -> inputs for attribute sof triangle class
        this.base = base;
        this.height = height;
        this.one = one;
        this.two = two;
        this.three = three;
    }
    
    public double areaTriangle(){
        
        return (this.base*this.height) / 2;
        
    }
}


#################################################

Instance Method vs Static Method.

Instance methods are reffered as non-static methods as you need an instance to use them.
Class methods are reffered as static methods as you do not need an instance to use them. 

##############################################################################################
Main.java

public class Main
{
	public static void main(String[] args) {
	    
		
		Students s1 = new Students("Madhu","Karumuru",2023,3.80,"Information Systems");
		
		System.out.println(s1.firstName +" "+ s1.lastName);
		s1.incrementYear();
		System.out.println(s1.gradYear);
	}
}

Students.java

public class Students{
    String firstName;
    String lastName;
    int gradYear;
    double gpa;
    String major;
    
    public Students(String firstName, String lastName, int gradYear, double gpa, String major){
        this.firstName = firstName;
        this.lastName = lastName;
        this.gradYear = gradYear;
        this.gpa = gpa;
        this.major = major;
    }
    
    public void incrementYear(){
        this.gradYear = this.gradYear + 1;
    }
    
}


#####################################################################################

Main.java


public class Main
{
	public static void main(String[] args) {
        	Tree t1 = new Tree(125,5,"Oak");
        	Tree t2 = new Tree(90,30,"Maple");
        	Tree t3 = new Tree(87,28,"Palm");
        	
        	System.out.println(t1.treeType);
        	
        	t1.announceTallTree();
        	t2.announceTallTree();
        	
        	System.out.println(Tree.trunkColor);
        	
        	t1.announceTree();
	}
}




Tree.java

public class Tree{
    double height;            //Non static attributes/members or Instance attributes
    double trunkDiameter;
    String treeType;
    static String trunkColor = "Brown"; //static member as truck is same for all trees
    
    Tree(double height, double trunkDiameter, String treeType){       //Contructor to create instances
        this.height = height;
        this.trunkDiameter = trunkDiameter;
        this.treeType = treeType;
    }
    
    void grow(){                                      // Method
        this.height = this.height + 10;
        this.trunkDiameter = this.trunkDiameter + 1;
    }
    
    void announceTallTree(){
        if(this.height > 100){
        	    System.out.println("Thats a Tall "+this.treeType+ " Tree");
        }else{
            System.out.println("Thats a Small "+this.treeType+ " Tree");
        }
    }
    
    static void announceTree(){                    //Static Method
        System.out.println("Look out for that "+trunkColor+" tree!");
    }
}


